demo()
x <- c(1,4,3)
x
demo()
install.packages("rmarkdown")
library("rmarkdown")
render("hello-Rmd.Rmd")
render("C:\Users\singa\AppData\Local\Temp\RtmpWAlecV\downloaded_packages\hello-Rmd.Rmd")
render(\Users\singa\AppData\Local\Temp\RtmpWAlecV\downloaded_packages\hello-Rmd.Rmd")
render("Users\singa\AppData\Local\Temp\RtmpWAlecV\downloaded_packages\hello-Rmd.Rmd")
render("C:\Users\singa\AppData\Local\Temp\RtmpWAlecV\downloaded_packages\hello-Rmd.Rmd")
library("rmarkdown")
newdata <- data.frame(x=c(0,1,1,2,3,3,4),y=c(1.10,3.10,2.80,5.15,7.35,7.15,9.50))
newdata
cor(newdata$x, newdata$y)
linearMod<- lm(y~x, data=newdata)
print(linearMod)
summary(linearMod)
plot(newdata$x,newdata$y)
abline(linearMod, col='red')
predict(linearMod,data.frame(x=c(0,1,1,2,3,3,4)),interval = "confidence")
install.packages("tinytex")
q()
print(test)
for(test in 1:10) {
print(test)
}
knitr::opts_chunk$set(echo = TRUE)
print(test)
x <- c(6,8,10,12,14,9,11,7,13,11)
summmary(x)
summary(x)
range(x)
y <- c(60,80,84,85,65,63,67,82,75,70,72,75)
summary(y)
library(MASS)
install.packages(ISLR)
install.packages("ISLR")
libraries(ISLR)
library(ISLR)
names(Boston)
library(stats)
lm.fit= lm(medv=lstat ,data=Boston )
lm.fit= lm(medv-lstat ,data=Boston )
lm.fit= lm(medv~lstat ,data=Boston )
lm.fit
predict(lm.fit, data.frame(lstat=c(5, 10, 15)), interval="confidence")
plot(lstat, medv)
plot(lstat, medv)
lm.fit= lm(medv~1stat ,data=Boston )
lm.fit= lm(medv~lstat ,data=Boston )
lm.fit= lm(medv~lstat ,data=Boston )
plot(lstat, medv)
abline(lm.fit)
plot(lstat, medv)
summary(lm.fit)
names(lm.fit)
coef(lm.fit)
confint(lm.fit)
predict(lm.fit,,data.frame(lstat=c(5,10,15)), interval = "prediction")
library(ISLR)
lm.fit= lm(medv~lstat ,data=Boston )
lm.fit
predict(lm.fit, data.frame(lstat=c(5, 10, 15)), interval="confidence")
predict(lm.fit,,data.frame(lstat=c(5,10,15)), interval = "prediction")
predict(lm.fit,,data.frame(lstat=c(5, 10, 15)), interval="prediction")
predict(lm.fit, data.frame(lstat=c(5, 10, 15)), interval="prediction")
plot(lstat, medv)
plot(Boston$lstat, Boston$medv)
abline(lm.fit)
plot(Boston$lstat, Boston$medv, col="green")
abline(lm.fit)
abline(lm.fit,lwd=3)
abline(lm.fit,lwd=3,col="red")
plot(Boston$lstat, Boston$medv, col="green",pch=20)
plot(Boston$lstat, Boston$medv, col="green",pch=1:20)
abline(lm.fit,lwd=3,col="red")
plot(Boston$lstat, Boston$medv, col="green",pch=15)
abline(lm.fit)
abline(lm.fit,lwd=3,col="red")
par(mfrow=c(2,2))
plot(predict(lm.fit),residuals(lm.fit))
plot(predict(lm.fit),rstudent(lm.fit))
plot(hatvaluels (lm.fit))
plot(hatvalues (lm.fit))
which.max(hatvalues(lm.fit))
# multiple linear regression
library(CAR)
install.packages("car")
# multiple linear regression
library(CAR)
# multiple linear regression
library(car)
lm.fit=lm(medv~lstat+age,data=Boston)
summary(lm.fit)
vif(lm.fit)
lm.fit1=lm(medv~.-age,data=Boston)
summary(lm.fit1)
lm.fit1=update(lm.fit,~.-age)
summary(lm(medv~lstat+age+lstat:age, data=Boston))
summary(lm(medv~lstat*age, data=Boston))
lm.fit2=lm(Boston$medv~Boston$lstat+l(Boston$lstat^2))
lm.fit2=lm(Boston$medv~Boston$lstat+|(Boston$lstat^2))
lm.fit2=lm(Boston$medv~Boston$lstat+(Boston$lstat^2))
summary(lm.fit2)
lmfit=lm(Boston$medv~Boston$lstat)
anova(lm.fit,lm.fit2)
par(mfrow=c(2,2))
plot(lm.fit2)
lmfit5=lm(Boston$medv~poly(Boston$lstat,5))
summary(lm.fit5)
lm.fit5=lm(Boston$medv~poly(Boston$lstat,5))
summary(lm.fit5)
View(lmfit5)
summary(lm(medv~log(rm),data=Boston))
names(Carseats)
lm.fit=lm(Sales~.+Income:Advertising+Price:Age,data=Carseats)
summary(lm.fit)
attach(Carseats)
contrasts(ShelveLoc)
library(ISLR)
set.seed(1)
train=sample(392,196)
lm.fit=lm(mpg~horsepower,data=Auto,subset=train)
attach(Auto)
mean((mpg-predict(lm.fit2,Auto))[-train]^2)
mean((mpg-predict(lm.fit,Auto))[-train]^2)
lm.fit2=lm(mpg~poly(horsepower,2),data=Auto,subset=train)
mean((mpg-predict(lm.fit2,Auto))[-train]^2)
lm.fit3=lm(mpg~poly(horsepower,3),data=Auto,subset=train)
mean((mpg-predict(lm.fit3,Auto))[-train]^2)
mpg
install.packages("RSQLite")
install.packages("DBI")
volume_vector <- function(r){
volumes <- c()
for(i in 1:3){
volumes <- c(volumes, (volume(r^i))
}
return(volumes)
}
# Run volume_vector(r) and print the volumes of the spheres with radius r,r^2 and r^3
# included print statement in volume vector to reflect instructions
volume_vector(r)
volumes <- c(volumes, (volume(r^i))
}
return(volumes)
}
# Run volume_vector(r) and print the volumes of the spheres with radius r,r^2 and r^3
# included print statement in volume vector to reflect instructions
volume_vector(r)
4/3*pi*r^3
r<-2
4/3*pi*r^3
volume_vector <- function(r){
volumes <- c()
for(i in 1:3){
volumes <- c(volumes, (volume(r^i))
}
return(volumes)
}
# Run volume_vector(r) and print the volumes of the spheres with radius r,r^2 and r^3
# included print statement in volume vector to reflect instructions
volume_vector(r)
for(i in 1:3):{
volumes <- c(volumes, (volume(r^i))
}
return(volumes)
}
# Run volume_vector(r) and print the volumes of the spheres with radius r,r^2 and r^3
# included print statement in volume vector to reflect instructions
volume_vector(r)
#changed for loop range to reflect 1:3 (r,r^2,r^3)
#replaced parameter in for statement to prevent overwriting
#removed r value out of function since it is redundant
#corrected r value to change as for loops continue
#changed for loop range to reflect 1:3 (r,r^2,r^3)
#replaced parameter in for statement to prevent overwriting
#removed r value out of function since it is redundant
#corrected r value to change as for loops continue
volumes <- c()
r<-2
4/3*pi*r^3
}
volume_vector <- function(r){
volumes <- c()
for(i in 1:3) {
volumes <- c(volumes, (volume(r^i))
}
return(volumes)
}
# Run volume_vector(r) and print the volumes of the spheres with radius r,r^2 and r^3
# included print statement in volume vector to reflect instructions
volume_vector(r)
for(i in 1:3) {
volumes <- c(volumes, (volume(r^i))
}
return(volumes)
}
# Run volume_vector(r) and print the volumes of the spheres with radius r,r^2 and r^3
# included print statement in volume vector to reflect instructions
volume_vector(r)
for(i in 1:3) {
volumes <- c(volumes, (volume(r^i))
}
return(volumes)
}
# Run volume_vector(r) and print the volumes of the spheres with radius r,r^2 and r^3
# included print statement in volume vector to reflect instructions
volume_vector(r)
volumes <- c()
volumes <- c(volumes, (volume(r^i))
}
return(volumes)
}
# Run volume_vector(r) and print the volumes of the spheres with radius r,r^2 and r^3
# included print statement in volume vector to reflect instructions
volume_vector(r)
volumes <- c(volumes, (volume(r^i)))
volume
volume(3)
# Function to compute the volume of a sphere with radius r
# changed correct formula for volume of sphere
# removed rho
volume <- function(r){
4/3*pi*r^3
}
r<-2
volume(3)
volume(r)
volume_vector <- function(r){
volumes <- c()
for(i in 1:3) {
volumes <- c(volumes, (volume(r^i)))
}
return(volumes)
}
# Run volume_vector(r) and print the volumes of the spheres with radius r,r^2 and r^3
# included print statement in volume vector to reflect instructions
volume_vector(r)
setwd("C:/Users/singa/repos/st2195_assignment_6")
#load and merge the datasets
speeches <- read.csv("speeches.csv")
head(speeches)
fx <- read.csv("fx.csv")
fx <- read.csv("fx.csv")
head(fx)
library(dplyr)
fxwithspeeches <- fx %>% inner_join(speeches)
head(fxwithspeeches)
#load and merge the datasets
speeches <- read.csv("speeches.csv")
head(speeches)
head(fx)
fxwithspeeches <- fx %>% inner_join(speeches)
head(fxwithspeeches)
